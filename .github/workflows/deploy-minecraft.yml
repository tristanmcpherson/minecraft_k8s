name: Deploy Minecraft Server

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        lfs: true
    
    - name: Extract Minecraft server files
      run: |
        # Find the first zip file in the minecraft_server directory
        ZIPFILE=$(find minecraft_server -name "*.zip" | head -n 1)
        
        if [ -z "$ZIPFILE" ]; then
          echo "No zip file found in minecraft_server directory"
          exit 1
        fi
        
        echo "Found zip file: $ZIPFILE"
        
        # Create directory for extracted files
        mkdir -p server_files
        
        # Extract the zip file
        unzip "$ZIPFILE" -d server_files
        
        echo "Server files extracted successfully"
        
        # Generate server.properties from config.json
        if [ -f "minecraft_server/config.json" ]; then
          echo "Generating server.properties from config.json"
          
          # Extract server properties from config.json
          jq -r '.server.properties | to_entries | map("\(.key)=\(.value)") | .[]' minecraft_server/config.json > server_files/server.properties
          
          echo "server.properties generated successfully"
        else
          echo "Config file not found, skipping server.properties generation"
        fi
        
        # Create docker-entrypoint.sh script
        cat > server_files/docker-entrypoint.sh << 'EOF'
        #!/bin/bash
        set -e

        # Print Minecraft server version
        echo "Starting Minecraft server with the following settings:"
        echo "Memory: ${MIN_MEMORY} - ${MAX_MEMORY}"
        echo "Server properties loaded from: /data/server.properties"

        # Accept EULA if not already accepted
        if [ ! -f "/data/eula.txt" ] || ! grep -q "eula=true" "/data/eula.txt"; then
          echo "Accepting Minecraft EULA..."
          echo "eula=true" > /data/eula.txt
        fi

        # Set memory settings in environment for the start.sh script to use
        export JAVA_OPTS="-Xms${MIN_MEMORY} -Xmx${MAX_MEMORY}"

        # Check if start.sh exists
        if [ -f "/data/start.sh" ]; then
          echo "Found start.sh script, executing..."
          chmod +x /data/start.sh
          exec /data/start.sh
        else
          echo "No start.sh found, falling back to direct Java execution"
          
          # Check if server.jar exists
          if [ ! -f "/data/server.jar" ]; then
            echo "Error: server.jar not found!"
            exit 1
          fi
          
          # Start the Minecraft server directly
          echo "Starting Minecraft server..."
          exec java -Xms${MIN_MEMORY} -Xmx${MAX_MEMORY} -jar server.jar nogui
        fi
        EOF
        
        chmod +x server_files/docker-entrypoint.sh
        echo "Created docker-entrypoint.sh script"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract build args from config
      id: build_args
      run: |
        if [ -f "minecraft_server/config.json" ]; then
          MIN_MEMORY=$(jq -r '.server.memory.min // "1G"' minecraft_server/config.json)
          MAX_MEMORY=$(jq -r '.server.memory.max // "2G"' minecraft_server/config.json)
          SERVER_PORT=25565
          
          echo "min_memory=$MIN_MEMORY" >> $GITHUB_OUTPUT
          echo "max_memory=$MAX_MEMORY" >> $GITHUB_OUTPUT
          echo "server_port=$SERVER_PORT" >> $GITHUB_OUTPUT
          
          echo "Extracted memory settings: Min=$MIN_MEMORY, Max=$MAX_MEMORY"
        else
          echo "Config file not found, using default memory settings"
          echo "min_memory=1G" >> $GITHUB_OUTPUT
          echo "max_memory=2G" >> $GITHUB_OUTPUT
          echo "server_port=25565" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/minecraft-server:${{ github.sha }}
        build-args: |
          MIN_MEMORY=${{ steps.build_args.outputs.min_memory }}
          MAX_MEMORY=${{ steps.build_args.outputs.max_memory }}
          SERVER_PORT=${{ steps.build_args.outputs.server_port }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Update Kubernetes deployment
      run: |
        export REGISTRY_URL=ghcr.io/${{ github.repository_owner }}
        export IMAGE_TAG=${{ github.sha }}
        export DEPLOYMENT_NAME=$(jq -r '.deployment.name' minecraft_server/config.json)
        
        # Replace variables in all Kubernetes files
        for file in k8s/*.yaml; do
          envsubst < $file > ${file}.updated
          mv ${file}.updated $file
        done
        
        # Apply Kubernetes configurations
        kubectl apply -f k8s/ 