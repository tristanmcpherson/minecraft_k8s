name: Deploy Minecraft Server

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      modpack_id:
        description: 'CurseForge modpack ID (e.g., 6048096 for Better MC Forge)'
        required: false
        default: '6048096'

jobs:
  build-and-deploy:
    runs-on: arc-runner-set
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Install dependencies
      run: |
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y unzip jq gettext-base curl python3 python3-pip ca-certificates gnupg

        # Install Python dependencies
        pip3 install requests beautifulsoup4


    - name: Check environment
      run: |
        echo "Checking environment..."
        whoami
        pwd
        echo "System info:"
        uname -a
        echo "Available disk space:"
        df -h

    - name: Checkout code (without LFS)
      uses: actions/checkout@v3
      with:
        lfs: false

    - name: Download and extract server pack
      env:
        CURSEFORGE_COOKIES: ${{ secrets.CURSEFORGE_COOKIES }}
      run: |
        # Create directory for server files
        mkdir -p server_files
        
        # Create a Python script to handle CurseForge downloads
        cat > get_curseforge_download.py << 'EOF'
        import requests
        import sys
        import json
        import os

        def clean_cookie_string(cookie_str):
            # Remove any newlines and extra whitespace
            cookie_str = cookie_str.replace('\n', '').strip()
            # Split cookies and clean each one
            cookies = {}
            for cookie in cookie_str.split(';'):
                if '=' in cookie:
                    name, value = cookie.strip().split('=', 1)
                    cookies[name.strip()] = value.strip()
            return cookies

        def get_direct_download_url(api_url, cookie_str):
            try:
                # Set up headers to mimic a browser
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Accept': '*/*',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'DNT': '1',
                    'Connection': 'keep-alive',
                }

                # Create a session to handle cookies and redirects
                session = requests.Session()
                
                # If we have cookies, clean and add them to the session
                if cookie_str:
                    cookies = clean_cookie_string(cookie_str)
                    session.cookies.update(cookies)
                    print(f"Using {len(cookies)} cookies", file=sys.stderr)

                # Make the request and follow redirects
                print(f"Making request to API URL: {api_url}", file=sys.stderr)
                response = session.get(api_url, headers=headers, allow_redirects=True)
                response.raise_for_status()

                # The final URL after following all redirects
                final_url = response.url
                print(f"Final download URL after redirects: {final_url}", file=sys.stderr)

                # Return only the cookies that were actually used/updated
                return final_url, dict(session.cookies.items())

            except Exception as e:
                print(f"Error getting download URL: {str(e)}", file=sys.stderr)
                return None, None

        if __name__ == "__main__":
            api_url = sys.argv[1]
            cookie_str = os.environ.get('CURSEFORGE_COOKIES', '')
            direct_url, cookies = get_direct_download_url(api_url, cookie_str)
            if direct_url:
                print(json.dumps({'url': direct_url, 'cookies': cookies}))
            else:
                sys.exit(1)
        EOF
        
        # Get the server pack URL from config.json
        if [ -f "minecraft_server/config.json" ]; then
          SERVER_PACK_URL=$(jq -r '.server.server_pack_url // empty' minecraft_server/config.json)
          if [ -n "$SERVER_PACK_URL" ]; then
            echo "Using server pack URL from config.json: $SERVER_PACK_URL"
          else
            echo "No server pack URL found in config.json"
            exit 1
          fi
        else
          echo "Config file not found"
          exit 1
        fi
        
        # Get the direct download URL using the Python script
        echo "Getting direct download URL..."
        DOWNLOAD_INFO=$(python3 get_curseforge_download.py "$SERVER_PACK_URL")
        
        if [ -z "$DOWNLOAD_INFO" ]; then
          echo "Failed to get direct download URL"
          exit 1
        fi
        
        DIRECT_URL=$(echo "$DOWNLOAD_INFO" | jq -r '.url')
        COOKIES=$(echo "$DOWNLOAD_INFO" | jq -r '.cookies | to_entries | map("\(.key)=\(.value)") | join("; ")')
        
        echo "Got direct download URL: $DIRECT_URL"
        
        # Download the server pack using cookies
        echo "Downloading server pack..."
        curl -L -b "$COOKIES" -o server_pack.zip "$DIRECT_URL"
        echo "Download complete"
        
        # Extract the server pack
        echo "Extracting server pack..."
        unzip -q server_pack.zip -d server_files
        echo "Extraction complete"
        
        # Create eula.txt
        echo "Creating eula.txt file..."
        echo "eula=true" > server_files/eula.txt
        echo "eula.txt created successfully"
        
        # Create docker-entrypoint.sh
        echo "Creating docker-entrypoint.sh..."
        cat > server_files/docker-entrypoint.sh << 'EOF'
        #!/bin/bash
        set -e

        # Print Minecraft server version
        echo "Starting Minecraft server with the following settings:"
        echo "Memory: ${MIN_MEMORY} - ${MAX_MEMORY}"
        echo "Server properties loaded from: /data/server.properties"

        # Set memory settings in environment for the start.sh script to use
        export JAVA_OPTS="-Xms${MIN_MEMORY} -Xmx${MAX_MEMORY}"

        # Check if start.sh exists
        if [ -f "/data/start.sh" ]; then
          echo "Found start.sh script, executing..."
          chmod +x /data/start.sh
          exec /data/start.sh
        else
          # Look for other startup scripts
          if [ -f "/data/startserver.sh" ]; then
            echo "Found startserver.sh script, executing..."
            chmod +x /data/startserver.sh
            exec /data/startserver.sh
          elif [ -f "/data/run.sh" ]; then
            echo "Found run.sh script, executing..."
            chmod +x /data/run.sh
            exec /data/run.sh
          elif [ -f "/data/server-start.sh" ]; then
            echo "Found server-start.sh script, executing..."
            chmod +x /data/server-start.sh
            exec /data/server-start.sh
          else
            echo "No startup script found, falling back to direct Java execution"
            
            # Find the server jar file
            SERVER_JAR=$(find /data -name "forge-*.jar" -o -name "server.jar" -o -name "*server*.jar" | head -n 1)
            
            if [ -z "$SERVER_JAR" ]; then
              echo "Error: No server jar found!"
              exit 1
            fi
            
            echo "Found server jar: $SERVER_JAR"
            
            # Start the Minecraft server directly
            echo "Starting Minecraft server..."
            cd /data
            exec java -Xms${MIN_MEMORY} -Xmx${MAX_MEMORY} -jar $(basename $SERVER_JAR) nogui
          fi
        fi
        EOF
        
        chmod +x server_files/docker-entrypoint.sh
        echo "docker-entrypoint.sh created successfully"
        
        # List the extracted files
        echo "Listing extracted files:"
        find server_files -type f -name "*.jar" | sort
        find server_files -type f -name "*.sh" | sort
        
        echo "Server files prepared successfully"
    
    - name: Extract build args from config
      id: build_args
      run: |
        # Set default values
        MIN_MEMORY="4G"
        MAX_MEMORY="8G"
        SERVER_PORT=25565
        
        # Try to read from config.json if it exists
        if [ -f "minecraft_server/config.json" ]; then
          MIN_MEMORY=$(jq -r '.server.memory.min // "4G"' minecraft_server/config.json)
          MAX_MEMORY=$(jq -r '.server.memory.max // "8G"' minecraft_server/config.json)
        fi
        
        echo "min_memory=$MIN_MEMORY" >> $GITHUB_OUTPUT
        echo "max_memory=$MAX_MEMORY" >> $GITHUB_OUTPUT
        echo "server_port=$SERVER_PORT" >> $GITHUB_OUTPUT
        
        echo "Using memory settings: Min=$MIN_MEMORY, Max=$MAX_MEMORY"
    
    - name: Build and push with Kaniko
      uses: aevea/action-kaniko@master
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        image: minecraft-server
        tag: ${{ github.sha }}
        cache: true
        cache_registry: cache
        extra_args: |
          --build-arg MIN_MEMORY=${{ steps.build_args.outputs.min_memory }}
          --build-arg MAX_MEMORY=${{ steps.build_args.outputs.max_memory }}
          --build-arg SERVER_PORT=${{ steps.build_args.outputs.server_port }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Update Kubernetes deployment
      run: |
        export REGISTRY_URL=ghcr.io/${{ github.repository_owner }}
        export IMAGE_TAG=${{ github.sha }}
        export DEPLOYMENT_NAME=$(jq -r '.deployment.name' minecraft_server/config.json || echo "minecraft-server")
        
        # Replace variables in all Kubernetes files
        for file in k8s/*.yaml; do
          envsubst < $file > ${file}.updated
          mv ${file}.updated $file
        done
        
        # Apply Kubernetes configurations
        kubectl apply -f k8s/ 