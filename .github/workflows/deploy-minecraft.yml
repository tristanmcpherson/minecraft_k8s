name: Deploy Minecraft Server

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      modpack_id:
        description: 'CurseForge modpack ID (e.g., 6048096 for Better MC Forge)'
        required: false
        default: '6048096'

jobs:
  build-and-deploy:
    runs-on: arc-runner-set
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip jq gettext-base curl python3 python3-pip
        echo "Skipping git-lfs due to quota issues"
        pip3 install requests beautifulsoup4

    - name: Check environment
      run: |
        echo "Checking environment..."
        whoami
        pwd
        echo "Docker version:"
        docker --version || echo "Docker not found"
        echo "System info:"
        uname -a
        echo "Available disk space:"
        df -h

    - name: Checkout code (without LFS)
      uses: actions/checkout@v3
      with:
        lfs: false

    - name: Download and extract server pack
      run: |
        # Create directory for server files
        mkdir -p server_files
        
        # Get the modpack ID from input or config.json
        MODPACK_ID="${{ github.event.inputs.modpack_id }}"
        if [ -f "minecraft_server/config.json" ]; then
          CONFIG_MODPACK_ID=$(jq -r '.server.modpack_id // empty' minecraft_server/config.json)
          if [ -n "$CONFIG_MODPACK_ID" ]; then
            MODPACK_ID="$CONFIG_MODPACK_ID"
            echo "Using modpack ID from config.json: $MODPACK_ID"
          fi
        fi
        
        if [ -z "$MODPACK_ID" ]; then
          MODPACK_ID="6048096"  # Default to Better MC Forge
          echo "No modpack ID specified, using default: $MODPACK_ID"
        fi
        
        # Create a Python script to get the direct download URL
        cat > get_curseforge_url.py << 'EOF'
        import requests
        import sys
        import json
        import re
        from bs4 import BeautifulSoup

        def get_direct_download_url(modpack_id):
            # First try the CurseForge API approach
            try:
                # Use CF Core API
                headers = {
                    'Accept': 'application/json',
                    'x-api-key': '$2a$10$5BS.SXGxLDfFHoEkV/Ff7OTNMrI4/54kKxYV3y/XwQPFdJWDSKbHG'  # Public API key
                }
                
                api_url = f"https://api.curseforge.com/v1/mods/files/{modpack_id}"
                response = requests.get(api_url, headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    download_url = data['data']['downloadUrl']
                    if download_url:
                        return download_url
            except Exception as e:
                print(f"API approach failed: {e}", file=sys.stderr)
            
            # Fallback to the server files approach
            try:
                # Try to find the server files directly
                base_url = f"https://www.curseforge.com/minecraft/modpacks/all-modpacks/files/{modpack_id}/all"
                response = requests.get(base_url)
                
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    server_links = soup.find_all('a', string=re.compile('Server', re.IGNORECASE))
                    
                    for link in server_links:
                        href = link.get('href')
                        if href and 'download' in href:
                            return f"https://www.curseforge.com{href}"
            except Exception as e:
                print(f"Server files approach failed: {e}", file=sys.stderr)
            
            # If all else fails, return a default URL
            return f"https://mediafilez.forgecdn.net/files/4979/252/All+the+Mods+9-1.0.9.zip"

        if __name__ == "__main__":
            modpack_id = sys.argv[1]
            direct_url = get_direct_download_url(modpack_id)
            print(direct_url)
        EOF
        
        # Run the Python script to get the direct download URL
        echo "Getting direct download URL for modpack ID: $MODPACK_ID"
        SERVER_PACK_URL=$(python3 get_curseforge_url.py "$MODPACK_ID")
        echo "Using download URL: $SERVER_PACK_URL"
        
        # Check if server pack exists in the repository
        if [ -f "minecraft_server/server_pack.zip" ]; then
          echo "Found server pack in repository, using it instead of downloading"
          cp minecraft_server/server_pack.zip server_pack.zip
        else
          # Download the server pack
          echo "Downloading server pack from: $SERVER_PACK_URL"
          curl -L -o server_pack.zip "$SERVER_PACK_URL"
          echo "Download complete"
        fi
        
        # Extract the server pack
        echo "Extracting server pack..."
        unzip -q server_pack.zip -d server_files
        echo "Extraction complete"
        
        # Create eula.txt
        echo "Creating eula.txt file..."
        echo "eula=true" > server_files/eula.txt
        echo "eula.txt created successfully"
        
        # Create docker-entrypoint.sh
        echo "Creating docker-entrypoint.sh..."
        cat > server_files/docker-entrypoint.sh << 'EOF'
        #!/bin/bash
        set -e

        # Print Minecraft server version
        echo "Starting Minecraft server with the following settings:"
        echo "Memory: ${MIN_MEMORY} - ${MAX_MEMORY}"
        echo "Server properties loaded from: /data/server.properties"

        # Set memory settings in environment for the start.sh script to use
        export JAVA_OPTS="-Xms${MIN_MEMORY} -Xmx${MAX_MEMORY}"

        # Check if start.sh exists
        if [ -f "/data/start.sh" ]; then
          echo "Found start.sh script, executing..."
          chmod +x /data/start.sh
          exec /data/start.sh
        else
          # Look for other startup scripts
          if [ -f "/data/startserver.sh" ]; then
            echo "Found startserver.sh script, executing..."
            chmod +x /data/startserver.sh
            exec /data/startserver.sh
          elif [ -f "/data/run.sh" ]; then
            echo "Found run.sh script, executing..."
            chmod +x /data/run.sh
            exec /data/run.sh
          elif [ -f "/data/server-start.sh" ]; then
            echo "Found server-start.sh script, executing..."
            chmod +x /data/server-start.sh
            exec /data/server-start.sh
          else
            echo "No startup script found, falling back to direct Java execution"
            
            # Find the server jar file
            SERVER_JAR=$(find /data -name "forge-*.jar" -o -name "server.jar" -o -name "*server*.jar" | head -n 1)
            
            if [ -z "$SERVER_JAR" ]; then
              echo "Error: No server jar found!"
              exit 1
            fi
            
            echo "Found server jar: $SERVER_JAR"
            
            # Start the Minecraft server directly
            echo "Starting Minecraft server..."
            cd /data
            exec java -Xms${MIN_MEMORY} -Xmx${MAX_MEMORY} -jar $(basename $SERVER_JAR) nogui
          fi
        fi
        EOF
        
        chmod +x server_files/docker-entrypoint.sh
        echo "docker-entrypoint.sh created successfully"
        
        # List the extracted files
        echo "Listing extracted files:"
        find server_files -type f -name "*.jar" | sort
        find server_files -type f -name "*.sh" | sort
        
        echo "Server files prepared successfully"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract build args from config
      id: build_args
      run: |
        # Set default values
        MIN_MEMORY="4G"
        MAX_MEMORY="8G"
        SERVER_PORT=25565
        
        # Try to read from config.json if it exists
        if [ -f "minecraft_server/config.json" ]; then
          MIN_MEMORY=$(jq -r '.server.memory.min // "4G"' minecraft_server/config.json)
          MAX_MEMORY=$(jq -r '.server.memory.max // "8G"' minecraft_server/config.json)
        fi
        
        echo "min_memory=$MIN_MEMORY" >> $GITHUB_OUTPUT
        echo "max_memory=$MAX_MEMORY" >> $GITHUB_OUTPUT
        echo "server_port=$SERVER_PORT" >> $GITHUB_OUTPUT
        
        echo "Using memory settings: Min=$MIN_MEMORY, Max=$MAX_MEMORY"
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/minecraft-server:${{ github.sha }}
        build-args: |
          MIN_MEMORY=${{ steps.build_args.outputs.min_memory }}
          MAX_MEMORY=${{ steps.build_args.outputs.max_memory }}
          SERVER_PORT=${{ steps.build_args.outputs.server_port }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Update Kubernetes deployment
      run: |
        export REGISTRY_URL=ghcr.io/${{ github.repository_owner }}
        export IMAGE_TAG=${{ github.sha }}
        export DEPLOYMENT_NAME=$(jq -r '.deployment.name' minecraft_server/config.json || echo "minecraft-server")
        
        # Replace variables in all Kubernetes files
        for file in k8s/*.yaml; do
          envsubst < $file > ${file}.updated
          mv ${file}.updated $file
        done
        
        # Apply Kubernetes configurations
        kubectl apply -f k8s/ 